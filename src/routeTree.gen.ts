/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as BackLayoutImport } from './routes/_back-layout'
import { Route as IndexImport } from './routes/index'
import { Route as BackLayoutUsersIndexImport } from './routes/_back-layout/users/index'
import { Route as BackLayoutDashboardIndexImport } from './routes/_back-layout/dashboard/index'
import { Route as BackLayoutUsersRolePermissionsIndexImport } from './routes/_back-layout/users/role-permissions/index'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const BackLayoutRoute = BackLayoutImport.update({
  id: '/_back-layout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BackLayoutUsersIndexRoute = BackLayoutUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => BackLayoutRoute,
} as any)

const BackLayoutDashboardIndexRoute = BackLayoutDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => BackLayoutRoute,
} as any)

const BackLayoutUsersRolePermissionsIndexRoute =
  BackLayoutUsersRolePermissionsIndexImport.update({
    id: '/users/role-permissions/',
    path: '/users/role-permissions/',
    getParentRoute: () => BackLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_back-layout': {
      id: '/_back-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof BackLayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_back-layout/dashboard/': {
      id: '/_back-layout/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof BackLayoutDashboardIndexImport
      parentRoute: typeof BackLayoutImport
    }
    '/_back-layout/users/': {
      id: '/_back-layout/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof BackLayoutUsersIndexImport
      parentRoute: typeof BackLayoutImport
    }
    '/_back-layout/users/role-permissions/': {
      id: '/_back-layout/users/role-permissions/'
      path: '/users/role-permissions'
      fullPath: '/users/role-permissions'
      preLoaderRoute: typeof BackLayoutUsersRolePermissionsIndexImport
      parentRoute: typeof BackLayoutImport
    }
  }
}

// Create and export the route tree

interface BackLayoutRouteChildren {
  BackLayoutDashboardIndexRoute: typeof BackLayoutDashboardIndexRoute
  BackLayoutUsersIndexRoute: typeof BackLayoutUsersIndexRoute
  BackLayoutUsersRolePermissionsIndexRoute: typeof BackLayoutUsersRolePermissionsIndexRoute
}

const BackLayoutRouteChildren: BackLayoutRouteChildren = {
  BackLayoutDashboardIndexRoute: BackLayoutDashboardIndexRoute,
  BackLayoutUsersIndexRoute: BackLayoutUsersIndexRoute,
  BackLayoutUsersRolePermissionsIndexRoute:
    BackLayoutUsersRolePermissionsIndexRoute,
}

const BackLayoutRouteWithChildren = BackLayoutRoute._addFileChildren(
  BackLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof BackLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof BackLayoutDashboardIndexRoute
  '/users': typeof BackLayoutUsersIndexRoute
  '/users/role-permissions': typeof BackLayoutUsersRolePermissionsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof BackLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof BackLayoutDashboardIndexRoute
  '/users': typeof BackLayoutUsersIndexRoute
  '/users/role-permissions': typeof BackLayoutUsersRolePermissionsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_back-layout': typeof BackLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_back-layout/dashboard/': typeof BackLayoutDashboardIndexRoute
  '/_back-layout/users/': typeof BackLayoutUsersIndexRoute
  '/_back-layout/users/role-permissions/': typeof BackLayoutUsersRolePermissionsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/dashboard'
    | '/users'
    | '/users/role-permissions'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/dashboard' | '/users' | '/users/role-permissions'
  id:
    | '__root__'
    | '/'
    | '/_back-layout'
    | '/login'
    | '/_back-layout/dashboard/'
    | '/_back-layout/users/'
    | '/_back-layout/users/role-permissions/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BackLayoutRoute: typeof BackLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BackLayoutRoute: BackLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_back-layout",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_back-layout": {
      "filePath": "_back-layout.tsx",
      "children": [
        "/_back-layout/dashboard/",
        "/_back-layout/users/",
        "/_back-layout/users/role-permissions/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_back-layout/dashboard/": {
      "filePath": "_back-layout/dashboard/index.tsx",
      "parent": "/_back-layout"
    },
    "/_back-layout/users/": {
      "filePath": "_back-layout/users/index.tsx",
      "parent": "/_back-layout"
    },
    "/_back-layout/users/role-permissions/": {
      "filePath": "_back-layout/users/role-permissions/index.tsx",
      "parent": "/_back-layout"
    }
  }
}
ROUTE_MANIFEST_END */
